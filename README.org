#+title: Simple Expression Evaluator

* Introduction
** What is this?
A simple math expression evaluator, written entirely in C Programming language. I created this project for mainly understanding the concepts of *Lexical Analysis* and *Parsing* using *Abstract Syntax Trees*. The learnings from making this project will be used in my future projects.


* Installation
#+begin_quote
The following installation instructions are specific to Unix-like operating systems.
#+end_quote

#+begin_src sh
git clone git@github.com:raghav-4002/expression-evaluator.git ~/expression-evaluator
cd ~/expression-evaluator
make
#+end_src

- Now that the project is cloned and compiled, run it using
#+begin_src bash
./eval
#+end_src


* Features and Capabilities
** Support for basic mathematical operations like
  - Addition (~+~)
  - Subtraction (~-~)
  - Multiplication (~*~)
  - Division (~/~)
  - Exponentiation (~^~)
** Grouping and operator precedence
- Operations are carried out in correct precedence order, following the BODMAS (or PEMDAS) rule.
  - Parenthesis are handled first. In nested parenthesis grouping, innermost group is evaluated first.
  - Unary plus and unary minus are resolved after this.
  - Exponentiation is handled next.
  - Division and multiplication come after exponentiation and have the same precedence.
  - Addition and subtraction are carried out at last.
** Extensive error handling
- Division by zero is an invalid operation.
- ~0~ raised to the power ~0~ (~0^0~) is also registered as an error.
- Invalid operator positioning or a symbol (number or operator) at some position it's not supposed to be, is also registered as an error.
- Unclosed parenthesis, or a closing parenthesis without any opening one are also detected as syntax error.
- An undetected symbol also comes under an error.


* Directory Structure and files

#+begin_src
├── include                  # Consists of public interfaces of modules defined in src/
├── libs                     # External libraries (using *linenoise* as of now)
└── src                      # Source files and modules
    ├── evaluator            # Evaluator module; traverses the AST produced by parser and evaluates the result
    ├── io-handling          # Input-output handling (deprecated)
    ├── lexer                # Lexer module; tokenizes the input string into tokens to be passed to parser
    └── parser               # Parser module; parses the tokens into an abstract syntax tree.
#+end_src

* How does it work?
There are 4 major components that take the input, tokenize it, produce an AST and evaluate the result by traversing the AST:

** Component 1: Input reading
- This component reads user input in raw string form.
- Associated files and directories
  - ~libs/linenoise/~: Consists of the ~linenoise~ library that deals with single line terminal editing and input reading. For more details: https://github.com/antirez/linenoise

** Component 2: Lexical Analyser or Lexer
- This component breaks the raw input string into *lexical tokens*.

- Each token has the following fields:
  - ~type~ that stores the type of token.
    - The following types are defined:
      - ~NUMBER~
      - ~PLUS~
      - ~MINUS~
      - ~STAR~
      - ~SLASH~
      - ~POWER~
      - ~NIL~

    - If a tokens can't be represented by the above type, a lexical error is thrown.
      #+begin_src
> a + b
Unrecognised token: 'a'
>
      #+end_src
  - ~value~ that stores the numerical value of the token.
    - For tokens of type ~NUMBER~, this is equal to the actual value of the number.
    - For rest of the tokens, this is set to ~0~ by default.
- The following files are associated with the lexer:
  - ~include/token.h~: Contains token definition.
  - ~include/lexer.h~: Contains the public interface to the lexer module.
  - ~src/lexer/lexer.c~: Source file containing the functions that actually apply tokenization.
  - ~src/lexer/lexer_helper.c~ and ~src/lexer/lexer_helper.h~: Private helper files for the lexer.

** Component 3: Parser
- This component parses the tokens generated by lexer into an abstract syntax tree.
  - An AST is a representation of tokens in a tree form.
  - It ensures that evaluation occurs in correct precedence order.
- The parser is defined on the following grammar:

  #+begin_src
expression -> factor (("+" | "-") factor)* ;

factor     -> exponent (("*" | "/") exponent)* ;

exponent   -> unary ("^" unary)* ;

unary      -> (("+" | "-") unary)*
            | primary

primary    -> NUMBER
		| "(" expression ")" ;
  #+end_src

- If an expression doesn't follow the above grammar, a syntax error is produced.
- The following syntax errors are defined
  - An operator at some arbitrary location.
    - ~1 + * 3~: ~*~ is at a wrong location.
  - An binary operator not having numbers at both sides.
    - ~1 +~: ~+~ expects a number at it right.
  - An unclosed parenthesis.
    - ~(1 + 2 * (3 ^ 4)~
  - A closing parenthesis is given, but without an opening one.
    - ~1 + 2)~
- A single node of the generated AST has the following attributes/fields:
  - ~type~: Representing the type of node.
    - ~NUMBER~, ~PLUS~, ~MINUS~, ~STAR~, ~SLASH~, ~POWER~, ~UNARY_MINUS~.
  - ~value~: Contains the value of the node. For ~NUMBER~ nodes, it's same as the value of the number. For non-~NUMBER~ nodes, its set to ~0~.
  - ~left~: Pointer to the left child of the node. Is ~NULL~ for ~NUMBER~ nodes.
  - ~right~: Pointer to the right child of the node. Is ~NULL~ for ~NUMBER~ and ~UNARY_MINUS~ nodes.
- The following files are associated with the parser:
  - ~include/node.h~: Contains definition of a node.
  - ~include/parser.h~: Public interface to the parser module.
  - ~src/parser/parser.c~: Implementation of parser.
  - ~src/parser/parser_helper.c~ and ~src/parser/parser_helper.h~: Private helper files for the parser.

** Component 4: Evaluator
- This component traverses the AST produced by the parser, evaluating the result of operations in bottom-up manner.
- The result of the operation on the left and right child of an *operator* node is stored in that node. In this manner, that operator node now acts as child node of it parent node.
- This process continues until all the nodes are evaluated.
- The result is the same AST but with final result stored in the root of the tree (the same root that was passed).
- The following files are associated with the evaluator:
  - ~include/evaluator.h~: Public interface to the evaluator module.
  - ~src/evaluator/evaluator.c~: Implementation of the evaluator.

** Miscellaneous Component(s)
- Some miscellaneous components are also present.
- These are mainly defined in the ~src/utils.c~ source file, with the interface at ~include/utils.h~.
- This file consists of functions that help to free the dynamically created tokens array and to destroy the AST.


* Tools and Technologies Used
- *C Programming language*: All code is written in C
- *Linenoise*: A small library that helps to edit input lines using the usual key bindings.
- *GNU Debugger*: To debug those nasty segfaults.
- *Valgrind*: To find hidden memory leaks.
